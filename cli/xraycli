#! /usr/bin/env python
from __future__ import unicode_literals
from __future__ import print_function
import click
import os
from tabulate import tabulate
from pandas import DataFrame
import json
import warnings
# supress  UserWarning: Could not load the default wrapper for your platform: cpy, performance may be affected!
warnings.simplefilter("ignore")
import nanomsg
from xray_client.XrayClient import XrayClient


class NoNodesError(Exception):
    pass


def humanize_number(value, fraction_point=1):
    powers = [10 ** x for x in (12, 9, 6, 3, 0)]
    human_powers = ('T', 'B', 'M', 'K', '')
    is_negative = False
    return_value = 0

    if not isinstance(value, float):
        value = float(value)
    if value < 0:
        is_negative = True
        value = abs(value)
    for i, p in enumerate(powers):
        if value >= p:
            return_value = str(round(value / (p / (10.0 ** fraction_point))) /
                               (10 ** fraction_point)) + human_powers[i]
            break
    if is_negative:
        return_value = "-" + return_value

    return return_value


class XrayCli(object):
    XRAY_NODES_PATH = '/tmp/xray/'

    def __init__(self):
        self.nodes_list = self.get_nodes()
        self.nodes = {}

    def get_nodes(self):
        try:
            nodes = os.listdir(self.XRAY_NODES_PATH)
            nodes = [[node] for node in nodes]
            nodes.insert(0, ["nodes"])
            return nodes
        except OSError:
            return [["NODE"], []]

    def get_result_set(self, full_xpath, fmt):
        if full_xpath == '/':
            return self.nodes_list
        if full_xpath[-1] != "/":
            full_xpath += "/"
        node_name, node_xpath = full_xpath.split('/', 2)[1:]
        if node_xpath == '':
            node_xpath = "/"
        if node_name not in self.nodes:
            self.nodes[node_name] = XrayClient(node_name)
        return self.nodes[node_name].send_recv(node_xpath, fmt)

    def humanize_column(self, column):
        return [humanize_number(int(value)) for value in column]

    def huminify_rates(self, df):
        columns = df.columns
        rate_columns = [column for column in columns if column.endswith("-rate")]
        df[rate_columns] = df[rate_columns].apply(self.humanize_column)

    def run(self, full_xpath, query, fmt):
        try:
            result_set = self.get_result_set(full_xpath, fmt)
        except nanomsg.NanoMsgAPIError:
            print("Timeout. Cannot access path " + full_xpath)
            return

        if fmt == 'json':
            print(json.dumps(result_set))
        else:
            df = DataFrame.from_records(result_set[1:], columns=result_set[0])
            self.huminify_rates(df)
            if query:
                df = df.query(query)
            if fmt == 'table':
                print(tabulate(df, headers=df.columns, showindex=False, tablefmt='simple'))
            else:
                itable = [(key + ':',) + tuple(val.values())
                          for key, val in df.to_dict().items()]
                print(tabulate(itable, showindex=False, tablefmt='plain'))

    def close(self):
        for node in self.nodes:
            try:
                node.close_socket()
            except Exception:
                pass


@click.command()
@click.option('--format', '-f',
              default='table',
              help='The wanted output format',
              type=click.Choice(['json', 'table', 'itable']))
@click.argument('paths', required=True, nargs=-1)
def main(format, paths):
    xcli = XrayCli()
    try:
        for path in paths:
            xcli.run(path, None, format)
    finally:
        xcli.close()


if __name__ == "__main__":
    main()
